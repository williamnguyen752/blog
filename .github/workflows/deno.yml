# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno CI/CD

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  id-token: write # Needed for Deno Deploy

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 2.2.4 # Match your local version

      # Optional: Format check if you want to enforce formatting
      - name: Verify formatting
        run: deno fmt --check
        continue-on-error: true # Optional: won't fail the workflow if format check fails

      # Optional: Lint check (only if you have Deno lint rules set up)
      - name: Run linter
        run: deno lint
        continue-on-error: true # Optional: won't fail the workflow if lint check fails

      # Build the site
      - name: Build site
        run: deno task build

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: ${{ runner.os }}-deno-

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on push to master, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 2.2.4 # Match your local version

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: ${{ runner.os }}-deno-

      # Build the site
      - name: Build site
        run: deno task build

      # Copy server.js to output directory
      - name: Copy server.js to output directory
        run: cp server.js ./out/www/

      # Deploy to Deno Deploy
      - name: Deploy to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "vietnguyen" # Your Deno Deploy project name
          entrypoint: "server.js"
          root: "./out/www"